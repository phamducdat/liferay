/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.dogoo.address.service.model.impl;

import com.dogoo.address.service.model.AddressEntry;
import com.dogoo.address.service.model.AddressEntryModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AddressEntry service. Represents a row in the &quot;DG_AddressEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AddressEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AddressEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AddressEntryImpl
 * @generated
 */
public class AddressEntryModelImpl
	extends BaseModelImpl<AddressEntry> implements AddressEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a address entry model instance should use the <code>AddressEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "DG_AddressEntry";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"externalReferenceCode", Types.VARCHAR},
		{"addressId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"creatorId", Types.BIGINT},
		{"customerId", Types.BIGINT}, {"detail", Types.VARCHAR},
		{"postalCode", Types.VARCHAR}, {"ward", Types.VARCHAR},
		{"district", Types.VARCHAR}, {"province", Types.VARCHAR},
		{"country", Types.VARCHAR}, {"wardCode", Types.VARCHAR},
		{"districtCode", Types.VARCHAR}, {"provinceCode", Types.VARCHAR},
		{"countryCode", Types.VARCHAR}, {"title", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalReferenceCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("creatorId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("customerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("detail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("postalCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ward", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("district", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("province", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("country", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("wardCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("districtCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("provinceCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("countryCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table DG_AddressEntry (uuid_ VARCHAR(75) null,externalReferenceCode VARCHAR(75) null,addressId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,creatorId LONG,customerId LONG,detail VARCHAR(75) null,postalCode VARCHAR(75) null,ward VARCHAR(75) null,district VARCHAR(75) null,province VARCHAR(75) null,country VARCHAR(75) null,wardCode VARCHAR(75) null,districtCode VARCHAR(75) null,provinceCode VARCHAR(75) null,countryCode VARCHAR(75) null,title VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table DG_AddressEntry";

	public static final String ORDER_BY_JPQL =
		" ORDER BY addressEntry.addressId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY DG_AddressEntry.addressId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EXTERNALREFERENCECODE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ADDRESSID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AddressEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _addressId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAddressId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _addressId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AddressEntry.class;
	}

	@Override
	public String getModelClassName() {
		return AddressEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AddressEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AddressEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AddressEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AddressEntry)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AddressEntry, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AddressEntry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AddressEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AddressEntry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AddressEntry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, AddressEntry>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			AddressEntry.class.getClassLoader(), AddressEntry.class,
			ModelWrapper.class);

		try {
			Constructor<AddressEntry> constructor =
				(Constructor<AddressEntry>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<AddressEntry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<AddressEntry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<AddressEntry, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<AddressEntry, Object>>();
		Map<String, BiConsumer<AddressEntry, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<AddressEntry, ?>>();

		attributeGetterFunctions.put("uuid", AddressEntry::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<AddressEntry, String>)AddressEntry::setUuid);
		attributeGetterFunctions.put(
			"externalReferenceCode", AddressEntry::getExternalReferenceCode);
		attributeSetterBiConsumers.put(
			"externalReferenceCode",
			(BiConsumer<AddressEntry, String>)
				AddressEntry::setExternalReferenceCode);
		attributeGetterFunctions.put("addressId", AddressEntry::getAddressId);
		attributeSetterBiConsumers.put(
			"addressId",
			(BiConsumer<AddressEntry, Long>)AddressEntry::setAddressId);
		attributeGetterFunctions.put("groupId", AddressEntry::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<AddressEntry, Long>)AddressEntry::setGroupId);
		attributeGetterFunctions.put("companyId", AddressEntry::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<AddressEntry, Long>)AddressEntry::setCompanyId);
		attributeGetterFunctions.put("userId", AddressEntry::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<AddressEntry, Long>)AddressEntry::setUserId);
		attributeGetterFunctions.put("userName", AddressEntry::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<AddressEntry, String>)AddressEntry::setUserName);
		attributeGetterFunctions.put("createDate", AddressEntry::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<AddressEntry, Date>)AddressEntry::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", AddressEntry::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<AddressEntry, Date>)AddressEntry::setModifiedDate);
		attributeGetterFunctions.put("creatorId", AddressEntry::getCreatorId);
		attributeSetterBiConsumers.put(
			"creatorId",
			(BiConsumer<AddressEntry, Long>)AddressEntry::setCreatorId);
		attributeGetterFunctions.put("customerId", AddressEntry::getCustomerId);
		attributeSetterBiConsumers.put(
			"customerId",
			(BiConsumer<AddressEntry, Long>)AddressEntry::setCustomerId);
		attributeGetterFunctions.put("detail", AddressEntry::getDetail);
		attributeSetterBiConsumers.put(
			"detail",
			(BiConsumer<AddressEntry, String>)AddressEntry::setDetail);
		attributeGetterFunctions.put("postalCode", AddressEntry::getPostalCode);
		attributeSetterBiConsumers.put(
			"postalCode",
			(BiConsumer<AddressEntry, String>)AddressEntry::setPostalCode);
		attributeGetterFunctions.put("ward", AddressEntry::getWard);
		attributeSetterBiConsumers.put(
			"ward", (BiConsumer<AddressEntry, String>)AddressEntry::setWard);
		attributeGetterFunctions.put("district", AddressEntry::getDistrict);
		attributeSetterBiConsumers.put(
			"district",
			(BiConsumer<AddressEntry, String>)AddressEntry::setDistrict);
		attributeGetterFunctions.put("province", AddressEntry::getProvince);
		attributeSetterBiConsumers.put(
			"province",
			(BiConsumer<AddressEntry, String>)AddressEntry::setProvince);
		attributeGetterFunctions.put("country", AddressEntry::getCountry);
		attributeSetterBiConsumers.put(
			"country",
			(BiConsumer<AddressEntry, String>)AddressEntry::setCountry);
		attributeGetterFunctions.put("wardCode", AddressEntry::getWardCode);
		attributeSetterBiConsumers.put(
			"wardCode",
			(BiConsumer<AddressEntry, String>)AddressEntry::setWardCode);
		attributeGetterFunctions.put(
			"districtCode", AddressEntry::getDistrictCode);
		attributeSetterBiConsumers.put(
			"districtCode",
			(BiConsumer<AddressEntry, String>)AddressEntry::setDistrictCode);
		attributeGetterFunctions.put(
			"provinceCode", AddressEntry::getProvinceCode);
		attributeSetterBiConsumers.put(
			"provinceCode",
			(BiConsumer<AddressEntry, String>)AddressEntry::setProvinceCode);
		attributeGetterFunctions.put(
			"countryCode", AddressEntry::getCountryCode);
		attributeSetterBiConsumers.put(
			"countryCode",
			(BiConsumer<AddressEntry, String>)AddressEntry::setCountryCode);
		attributeGetterFunctions.put("title", AddressEntry::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<AddressEntry, String>)AddressEntry::setTitle);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public String getExternalReferenceCode() {
		if (_externalReferenceCode == null) {
			return "";
		}
		else {
			return _externalReferenceCode;
		}
	}

	@Override
	public void setExternalReferenceCode(String externalReferenceCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_externalReferenceCode = externalReferenceCode;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalExternalReferenceCode() {
		return getColumnOriginalValue("externalReferenceCode");
	}

	@Override
	public long getAddressId() {
		return _addressId;
	}

	@Override
	public void setAddressId(long addressId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressId = addressId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getCreatorId() {
		return _creatorId;
	}

	@Override
	public void setCreatorId(long creatorId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_creatorId = creatorId;
	}

	@Override
	public long getCustomerId() {
		return _customerId;
	}

	@Override
	public void setCustomerId(long customerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customerId = customerId;
	}

	@Override
	public String getDetail() {
		if (_detail == null) {
			return "";
		}
		else {
			return _detail;
		}
	}

	@Override
	public void setDetail(String detail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_detail = detail;
	}

	@Override
	public String getPostalCode() {
		if (_postalCode == null) {
			return "";
		}
		else {
			return _postalCode;
		}
	}

	@Override
	public void setPostalCode(String postalCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_postalCode = postalCode;
	}

	@Override
	public String getWard() {
		if (_ward == null) {
			return "";
		}
		else {
			return _ward;
		}
	}

	@Override
	public void setWard(String ward) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ward = ward;
	}

	@Override
	public String getDistrict() {
		if (_district == null) {
			return "";
		}
		else {
			return _district;
		}
	}

	@Override
	public void setDistrict(String district) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_district = district;
	}

	@Override
	public String getProvince() {
		if (_province == null) {
			return "";
		}
		else {
			return _province;
		}
	}

	@Override
	public void setProvince(String province) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_province = province;
	}

	@Override
	public String getCountry() {
		if (_country == null) {
			return "";
		}
		else {
			return _country;
		}
	}

	@Override
	public void setCountry(String country) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_country = country;
	}

	@Override
	public String getWardCode() {
		if (_wardCode == null) {
			return "";
		}
		else {
			return _wardCode;
		}
	}

	@Override
	public void setWardCode(String wardCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_wardCode = wardCode;
	}

	@Override
	public String getDistrictCode() {
		if (_districtCode == null) {
			return "";
		}
		else {
			return _districtCode;
		}
	}

	@Override
	public void setDistrictCode(String districtCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_districtCode = districtCode;
	}

	@Override
	public String getProvinceCode() {
		if (_provinceCode == null) {
			return "";
		}
		else {
			return _provinceCode;
		}
	}

	@Override
	public void setProvinceCode(String provinceCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_provinceCode = provinceCode;
	}

	@Override
	public String getCountryCode() {
		if (_countryCode == null) {
			return "";
		}
		else {
			return _countryCode;
		}
	}

	@Override
	public void setCountryCode(String countryCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_countryCode = countryCode;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_title = title;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(AddressEntry.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AddressEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AddressEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AddressEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AddressEntryImpl addressEntryImpl = new AddressEntryImpl();

		addressEntryImpl.setUuid(getUuid());
		addressEntryImpl.setExternalReferenceCode(getExternalReferenceCode());
		addressEntryImpl.setAddressId(getAddressId());
		addressEntryImpl.setGroupId(getGroupId());
		addressEntryImpl.setCompanyId(getCompanyId());
		addressEntryImpl.setUserId(getUserId());
		addressEntryImpl.setUserName(getUserName());
		addressEntryImpl.setCreateDate(getCreateDate());
		addressEntryImpl.setModifiedDate(getModifiedDate());
		addressEntryImpl.setCreatorId(getCreatorId());
		addressEntryImpl.setCustomerId(getCustomerId());
		addressEntryImpl.setDetail(getDetail());
		addressEntryImpl.setPostalCode(getPostalCode());
		addressEntryImpl.setWard(getWard());
		addressEntryImpl.setDistrict(getDistrict());
		addressEntryImpl.setProvince(getProvince());
		addressEntryImpl.setCountry(getCountry());
		addressEntryImpl.setWardCode(getWardCode());
		addressEntryImpl.setDistrictCode(getDistrictCode());
		addressEntryImpl.setProvinceCode(getProvinceCode());
		addressEntryImpl.setCountryCode(getCountryCode());
		addressEntryImpl.setTitle(getTitle());

		addressEntryImpl.resetOriginalValues();

		return addressEntryImpl;
	}

	@Override
	public AddressEntry cloneWithOriginalValues() {
		AddressEntryImpl addressEntryImpl = new AddressEntryImpl();

		addressEntryImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		addressEntryImpl.setExternalReferenceCode(
			this.<String>getColumnOriginalValue("externalReferenceCode"));
		addressEntryImpl.setAddressId(
			this.<Long>getColumnOriginalValue("addressId"));
		addressEntryImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		addressEntryImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		addressEntryImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		addressEntryImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		addressEntryImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		addressEntryImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		addressEntryImpl.setCreatorId(
			this.<Long>getColumnOriginalValue("creatorId"));
		addressEntryImpl.setCustomerId(
			this.<Long>getColumnOriginalValue("customerId"));
		addressEntryImpl.setDetail(
			this.<String>getColumnOriginalValue("detail"));
		addressEntryImpl.setPostalCode(
			this.<String>getColumnOriginalValue("postalCode"));
		addressEntryImpl.setWard(this.<String>getColumnOriginalValue("ward"));
		addressEntryImpl.setDistrict(
			this.<String>getColumnOriginalValue("district"));
		addressEntryImpl.setProvince(
			this.<String>getColumnOriginalValue("province"));
		addressEntryImpl.setCountry(
			this.<String>getColumnOriginalValue("country"));
		addressEntryImpl.setWardCode(
			this.<String>getColumnOriginalValue("wardCode"));
		addressEntryImpl.setDistrictCode(
			this.<String>getColumnOriginalValue("districtCode"));
		addressEntryImpl.setProvinceCode(
			this.<String>getColumnOriginalValue("provinceCode"));
		addressEntryImpl.setCountryCode(
			this.<String>getColumnOriginalValue("countryCode"));
		addressEntryImpl.setTitle(this.<String>getColumnOriginalValue("title"));

		return addressEntryImpl;
	}

	@Override
	public int compareTo(AddressEntry addressEntry) {
		long primaryKey = addressEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AddressEntry)) {
			return false;
		}

		AddressEntry addressEntry = (AddressEntry)object;

		long primaryKey = addressEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AddressEntry> toCacheModel() {
		AddressEntryCacheModel addressEntryCacheModel =
			new AddressEntryCacheModel();

		addressEntryCacheModel.uuid = getUuid();

		String uuid = addressEntryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			addressEntryCacheModel.uuid = null;
		}

		addressEntryCacheModel.externalReferenceCode =
			getExternalReferenceCode();

		String externalReferenceCode =
			addressEntryCacheModel.externalReferenceCode;

		if ((externalReferenceCode != null) &&
			(externalReferenceCode.length() == 0)) {

			addressEntryCacheModel.externalReferenceCode = null;
		}

		addressEntryCacheModel.addressId = getAddressId();

		addressEntryCacheModel.groupId = getGroupId();

		addressEntryCacheModel.companyId = getCompanyId();

		addressEntryCacheModel.userId = getUserId();

		addressEntryCacheModel.userName = getUserName();

		String userName = addressEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			addressEntryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			addressEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			addressEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			addressEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			addressEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		addressEntryCacheModel.creatorId = getCreatorId();

		addressEntryCacheModel.customerId = getCustomerId();

		addressEntryCacheModel.detail = getDetail();

		String detail = addressEntryCacheModel.detail;

		if ((detail != null) && (detail.length() == 0)) {
			addressEntryCacheModel.detail = null;
		}

		addressEntryCacheModel.postalCode = getPostalCode();

		String postalCode = addressEntryCacheModel.postalCode;

		if ((postalCode != null) && (postalCode.length() == 0)) {
			addressEntryCacheModel.postalCode = null;
		}

		addressEntryCacheModel.ward = getWard();

		String ward = addressEntryCacheModel.ward;

		if ((ward != null) && (ward.length() == 0)) {
			addressEntryCacheModel.ward = null;
		}

		addressEntryCacheModel.district = getDistrict();

		String district = addressEntryCacheModel.district;

		if ((district != null) && (district.length() == 0)) {
			addressEntryCacheModel.district = null;
		}

		addressEntryCacheModel.province = getProvince();

		String province = addressEntryCacheModel.province;

		if ((province != null) && (province.length() == 0)) {
			addressEntryCacheModel.province = null;
		}

		addressEntryCacheModel.country = getCountry();

		String country = addressEntryCacheModel.country;

		if ((country != null) && (country.length() == 0)) {
			addressEntryCacheModel.country = null;
		}

		addressEntryCacheModel.wardCode = getWardCode();

		String wardCode = addressEntryCacheModel.wardCode;

		if ((wardCode != null) && (wardCode.length() == 0)) {
			addressEntryCacheModel.wardCode = null;
		}

		addressEntryCacheModel.districtCode = getDistrictCode();

		String districtCode = addressEntryCacheModel.districtCode;

		if ((districtCode != null) && (districtCode.length() == 0)) {
			addressEntryCacheModel.districtCode = null;
		}

		addressEntryCacheModel.provinceCode = getProvinceCode();

		String provinceCode = addressEntryCacheModel.provinceCode;

		if ((provinceCode != null) && (provinceCode.length() == 0)) {
			addressEntryCacheModel.provinceCode = null;
		}

		addressEntryCacheModel.countryCode = getCountryCode();

		String countryCode = addressEntryCacheModel.countryCode;

		if ((countryCode != null) && (countryCode.length() == 0)) {
			addressEntryCacheModel.countryCode = null;
		}

		addressEntryCacheModel.title = getTitle();

		String title = addressEntryCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			addressEntryCacheModel.title = null;
		}

		return addressEntryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AddressEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AddressEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AddressEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((AddressEntry)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<AddressEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<AddressEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AddressEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((AddressEntry)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AddressEntry>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _externalReferenceCode;
	private long _addressId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _creatorId;
	private long _customerId;
	private String _detail;
	private String _postalCode;
	private String _ward;
	private String _district;
	private String _province;
	private String _country;
	private String _wardCode;
	private String _districtCode;
	private String _provinceCode;
	private String _countryCode;
	private String _title;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<AddressEntry, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AddressEntry)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"externalReferenceCode", _externalReferenceCode);
		_columnOriginalValues.put("addressId", _addressId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("creatorId", _creatorId);
		_columnOriginalValues.put("customerId", _customerId);
		_columnOriginalValues.put("detail", _detail);
		_columnOriginalValues.put("postalCode", _postalCode);
		_columnOriginalValues.put("ward", _ward);
		_columnOriginalValues.put("district", _district);
		_columnOriginalValues.put("province", _province);
		_columnOriginalValues.put("country", _country);
		_columnOriginalValues.put("wardCode", _wardCode);
		_columnOriginalValues.put("districtCode", _districtCode);
		_columnOriginalValues.put("provinceCode", _provinceCode);
		_columnOriginalValues.put("countryCode", _countryCode);
		_columnOriginalValues.put("title", _title);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("externalReferenceCode", 2L);

		columnBitmasks.put("addressId", 4L);

		columnBitmasks.put("groupId", 8L);

		columnBitmasks.put("companyId", 16L);

		columnBitmasks.put("userId", 32L);

		columnBitmasks.put("userName", 64L);

		columnBitmasks.put("createDate", 128L);

		columnBitmasks.put("modifiedDate", 256L);

		columnBitmasks.put("creatorId", 512L);

		columnBitmasks.put("customerId", 1024L);

		columnBitmasks.put("detail", 2048L);

		columnBitmasks.put("postalCode", 4096L);

		columnBitmasks.put("ward", 8192L);

		columnBitmasks.put("district", 16384L);

		columnBitmasks.put("province", 32768L);

		columnBitmasks.put("country", 65536L);

		columnBitmasks.put("wardCode", 131072L);

		columnBitmasks.put("districtCode", 262144L);

		columnBitmasks.put("provinceCode", 524288L);

		columnBitmasks.put("countryCode", 1048576L);

		columnBitmasks.put("title", 2097152L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AddressEntry _escapedModel;

}