/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.dogoo.common.files.manager.service.model.impl;

import com.dogoo.common.files.manager.service.model.DGDocumentManagerEntry;
import com.dogoo.common.files.manager.service.model.DGDocumentManagerEntryModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DGDocumentManagerEntry service. Represents a row in the &quot;DG_DocumentManager&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DGDocumentManagerEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DGDocumentManagerEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DGDocumentManagerEntryImpl
 * @generated
 */
public class DGDocumentManagerEntryModelImpl
	extends BaseModelImpl<DGDocumentManagerEntry>
	implements DGDocumentManagerEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dg document manager entry model instance should use the <code>DGDocumentManagerEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "DG_DocumentManager";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"externalReferenceCode", Types.VARCHAR},
		{"documentManagerId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"customerId", Types.BIGINT},
		{"creatorId", Types.BIGINT}, {"pkCode", Types.VARCHAR},
		{"parentId", Types.BIGINT}, {"name", Types.VARCHAR},
		{"category", Types.VARCHAR}, {"type_", Types.VARCHAR},
		{"fileId", Types.BIGINT}, {"fileSize", Types.VARCHAR},
		{"fileExtension", Types.VARCHAR}, {"mineType", Types.VARCHAR},
		{"path_", Types.VARCHAR}, {"moduleId", Types.VARCHAR},
		{"appId", Types.VARCHAR}, {"departmentId", Types.BIGINT},
		{"isPrivate", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalReferenceCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("documentManagerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("customerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("creatorId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("pkCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("parentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("category", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("type_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fileId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fileSize", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fileExtension", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mineType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("path_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("moduleId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("appId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("departmentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("isPrivate", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table DG_DocumentManager (uuid_ VARCHAR(75) null,externalReferenceCode VARCHAR(75) null,documentManagerId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,customerId LONG,creatorId LONG,pkCode VARCHAR(75) null,parentId LONG,name VARCHAR(500) null,category VARCHAR(75) null,type_ VARCHAR(75) null,fileId LONG,fileSize VARCHAR(75) null,fileExtension VARCHAR(75) null,mineType VARCHAR(75) null,path_ VARCHAR(75) null,moduleId VARCHAR(75) null,appId VARCHAR(75) null,departmentId LONG,isPrivate BOOLEAN)";

	public static final String TABLE_SQL_DROP = "drop table DG_DocumentManager";

	public static final String ORDER_BY_JPQL =
		" ORDER BY dgDocumentManagerEntry.documentManagerId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY DG_DocumentManager.documentManagerId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CATEGORY_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATORID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EXTERNALREFERENCECODE_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FILEEXTENSION_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FILEID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NAME_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PARENTID_COLUMN_BITMASK = 256L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PKCODE_COLUMN_BITMASK = 512L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TYPE_COLUMN_BITMASK = 1024L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2048L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DOCUMENTMANAGERID_COLUMN_BITMASK = 4096L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DGDocumentManagerEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _documentManagerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDocumentManagerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _documentManagerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DGDocumentManagerEntry.class;
	}

	@Override
	public String getModelClassName() {
		return DGDocumentManagerEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DGDocumentManagerEntry, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DGDocumentManagerEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DGDocumentManagerEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DGDocumentManagerEntry)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DGDocumentManagerEntry, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DGDocumentManagerEntry, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DGDocumentManagerEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DGDocumentManagerEntry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DGDocumentManagerEntry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, DGDocumentManagerEntry>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			DGDocumentManagerEntry.class.getClassLoader(),
			DGDocumentManagerEntry.class, ModelWrapper.class);

		try {
			Constructor<DGDocumentManagerEntry> constructor =
				(Constructor<DGDocumentManagerEntry>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<DGDocumentManagerEntry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DGDocumentManagerEntry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DGDocumentManagerEntry, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<DGDocumentManagerEntry, Object>>();
		Map<String, BiConsumer<DGDocumentManagerEntry, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<DGDocumentManagerEntry, ?>>();

		attributeGetterFunctions.put("uuid", DGDocumentManagerEntry::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<DGDocumentManagerEntry, String>)
				DGDocumentManagerEntry::setUuid);
		attributeGetterFunctions.put(
			"externalReferenceCode",
			DGDocumentManagerEntry::getExternalReferenceCode);
		attributeSetterBiConsumers.put(
			"externalReferenceCode",
			(BiConsumer<DGDocumentManagerEntry, String>)
				DGDocumentManagerEntry::setExternalReferenceCode);
		attributeGetterFunctions.put(
			"documentManagerId", DGDocumentManagerEntry::getDocumentManagerId);
		attributeSetterBiConsumers.put(
			"documentManagerId",
			(BiConsumer<DGDocumentManagerEntry, Long>)
				DGDocumentManagerEntry::setDocumentManagerId);
		attributeGetterFunctions.put(
			"groupId", DGDocumentManagerEntry::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<DGDocumentManagerEntry, Long>)
				DGDocumentManagerEntry::setGroupId);
		attributeGetterFunctions.put(
			"companyId", DGDocumentManagerEntry::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<DGDocumentManagerEntry, Long>)
				DGDocumentManagerEntry::setCompanyId);
		attributeGetterFunctions.put(
			"userId", DGDocumentManagerEntry::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<DGDocumentManagerEntry, Long>)
				DGDocumentManagerEntry::setUserId);
		attributeGetterFunctions.put(
			"userName", DGDocumentManagerEntry::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<DGDocumentManagerEntry, String>)
				DGDocumentManagerEntry::setUserName);
		attributeGetterFunctions.put(
			"createDate", DGDocumentManagerEntry::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<DGDocumentManagerEntry, Date>)
				DGDocumentManagerEntry::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", DGDocumentManagerEntry::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<DGDocumentManagerEntry, Date>)
				DGDocumentManagerEntry::setModifiedDate);
		attributeGetterFunctions.put(
			"customerId", DGDocumentManagerEntry::getCustomerId);
		attributeSetterBiConsumers.put(
			"customerId",
			(BiConsumer<DGDocumentManagerEntry, Long>)
				DGDocumentManagerEntry::setCustomerId);
		attributeGetterFunctions.put(
			"creatorId", DGDocumentManagerEntry::getCreatorId);
		attributeSetterBiConsumers.put(
			"creatorId",
			(BiConsumer<DGDocumentManagerEntry, Long>)
				DGDocumentManagerEntry::setCreatorId);
		attributeGetterFunctions.put(
			"pkCode", DGDocumentManagerEntry::getPkCode);
		attributeSetterBiConsumers.put(
			"pkCode",
			(BiConsumer<DGDocumentManagerEntry, String>)
				DGDocumentManagerEntry::setPkCode);
		attributeGetterFunctions.put(
			"parentId", DGDocumentManagerEntry::getParentId);
		attributeSetterBiConsumers.put(
			"parentId",
			(BiConsumer<DGDocumentManagerEntry, Long>)
				DGDocumentManagerEntry::setParentId);
		attributeGetterFunctions.put("name", DGDocumentManagerEntry::getName);
		attributeSetterBiConsumers.put(
			"name",
			(BiConsumer<DGDocumentManagerEntry, String>)
				DGDocumentManagerEntry::setName);
		attributeGetterFunctions.put(
			"category", DGDocumentManagerEntry::getCategory);
		attributeSetterBiConsumers.put(
			"category",
			(BiConsumer<DGDocumentManagerEntry, String>)
				DGDocumentManagerEntry::setCategory);
		attributeGetterFunctions.put("type", DGDocumentManagerEntry::getType);
		attributeSetterBiConsumers.put(
			"type",
			(BiConsumer<DGDocumentManagerEntry, String>)
				DGDocumentManagerEntry::setType);
		attributeGetterFunctions.put(
			"fileId", DGDocumentManagerEntry::getFileId);
		attributeSetterBiConsumers.put(
			"fileId",
			(BiConsumer<DGDocumentManagerEntry, Long>)
				DGDocumentManagerEntry::setFileId);
		attributeGetterFunctions.put(
			"fileSize", DGDocumentManagerEntry::getFileSize);
		attributeSetterBiConsumers.put(
			"fileSize",
			(BiConsumer<DGDocumentManagerEntry, String>)
				DGDocumentManagerEntry::setFileSize);
		attributeGetterFunctions.put(
			"fileExtension", DGDocumentManagerEntry::getFileExtension);
		attributeSetterBiConsumers.put(
			"fileExtension",
			(BiConsumer<DGDocumentManagerEntry, String>)
				DGDocumentManagerEntry::setFileExtension);
		attributeGetterFunctions.put(
			"mineType", DGDocumentManagerEntry::getMineType);
		attributeSetterBiConsumers.put(
			"mineType",
			(BiConsumer<DGDocumentManagerEntry, String>)
				DGDocumentManagerEntry::setMineType);
		attributeGetterFunctions.put("path", DGDocumentManagerEntry::getPath);
		attributeSetterBiConsumers.put(
			"path",
			(BiConsumer<DGDocumentManagerEntry, String>)
				DGDocumentManagerEntry::setPath);
		attributeGetterFunctions.put(
			"moduleId", DGDocumentManagerEntry::getModuleId);
		attributeSetterBiConsumers.put(
			"moduleId",
			(BiConsumer<DGDocumentManagerEntry, String>)
				DGDocumentManagerEntry::setModuleId);
		attributeGetterFunctions.put("appId", DGDocumentManagerEntry::getAppId);
		attributeSetterBiConsumers.put(
			"appId",
			(BiConsumer<DGDocumentManagerEntry, String>)
				DGDocumentManagerEntry::setAppId);
		attributeGetterFunctions.put(
			"departmentId", DGDocumentManagerEntry::getDepartmentId);
		attributeSetterBiConsumers.put(
			"departmentId",
			(BiConsumer<DGDocumentManagerEntry, Long>)
				DGDocumentManagerEntry::setDepartmentId);
		attributeGetterFunctions.put(
			"isPrivate", DGDocumentManagerEntry::getIsPrivate);
		attributeSetterBiConsumers.put(
			"isPrivate",
			(BiConsumer<DGDocumentManagerEntry, Boolean>)
				DGDocumentManagerEntry::setIsPrivate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public String getExternalReferenceCode() {
		if (_externalReferenceCode == null) {
			return "";
		}
		else {
			return _externalReferenceCode;
		}
	}

	@Override
	public void setExternalReferenceCode(String externalReferenceCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_externalReferenceCode = externalReferenceCode;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalExternalReferenceCode() {
		return getColumnOriginalValue("externalReferenceCode");
	}

	@Override
	public long getDocumentManagerId() {
		return _documentManagerId;
	}

	@Override
	public void setDocumentManagerId(long documentManagerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_documentManagerId = documentManagerId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getCustomerId() {
		return _customerId;
	}

	@Override
	public void setCustomerId(long customerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customerId = customerId;
	}

	@Override
	public long getCreatorId() {
		return _creatorId;
	}

	@Override
	public void setCreatorId(long creatorId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_creatorId = creatorId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCreatorId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("creatorId"));
	}

	@Override
	public String getPkCode() {
		if (_pkCode == null) {
			return "";
		}
		else {
			return _pkCode;
		}
	}

	@Override
	public void setPkCode(String pkCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pkCode = pkCode;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalPkCode() {
		return getColumnOriginalValue("pkCode");
	}

	@Override
	public long getParentId() {
		return _parentId;
	}

	@Override
	public void setParentId(long parentId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_parentId = parentId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalParentId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("parentId"));
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalName() {
		return getColumnOriginalValue("name");
	}

	@Override
	public String getCategory() {
		if (_category == null) {
			return "";
		}
		else {
			return _category;
		}
	}

	@Override
	public void setCategory(String category) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_category = category;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCategory() {
		return getColumnOriginalValue("category");
	}

	@Override
	public String getType() {
		if (_type == null) {
			return "";
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_type = type;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalType() {
		return getColumnOriginalValue("type_");
	}

	@Override
	public long getFileId() {
		return _fileId;
	}

	@Override
	public void setFileId(long fileId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fileId = fileId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFileId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("fileId"));
	}

	@Override
	public String getFileSize() {
		if (_fileSize == null) {
			return "";
		}
		else {
			return _fileSize;
		}
	}

	@Override
	public void setFileSize(String fileSize) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fileSize = fileSize;
	}

	@Override
	public String getFileExtension() {
		if (_fileExtension == null) {
			return "";
		}
		else {
			return _fileExtension;
		}
	}

	@Override
	public void setFileExtension(String fileExtension) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fileExtension = fileExtension;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalFileExtension() {
		return getColumnOriginalValue("fileExtension");
	}

	@Override
	public String getMineType() {
		if (_mineType == null) {
			return "";
		}
		else {
			return _mineType;
		}
	}

	@Override
	public void setMineType(String mineType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mineType = mineType;
	}

	@Override
	public String getPath() {
		if (_path == null) {
			return "";
		}
		else {
			return _path;
		}
	}

	@Override
	public void setPath(String path) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_path = path;
	}

	@Override
	public String getModuleId() {
		if (_moduleId == null) {
			return "";
		}
		else {
			return _moduleId;
		}
	}

	@Override
	public void setModuleId(String moduleId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_moduleId = moduleId;
	}

	@Override
	public String getAppId() {
		if (_appId == null) {
			return "";
		}
		else {
			return _appId;
		}
	}

	@Override
	public void setAppId(String appId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_appId = appId;
	}

	@Override
	public long getDepartmentId() {
		return _departmentId;
	}

	@Override
	public void setDepartmentId(long departmentId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_departmentId = departmentId;
	}

	@Override
	public boolean getIsPrivate() {
		return _isPrivate;
	}

	@Override
	public boolean isIsPrivate() {
		return _isPrivate;
	}

	@Override
	public void setIsPrivate(boolean isPrivate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isPrivate = isPrivate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(DGDocumentManagerEntry.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), DGDocumentManagerEntry.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DGDocumentManagerEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DGDocumentManagerEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DGDocumentManagerEntryImpl dgDocumentManagerEntryImpl =
			new DGDocumentManagerEntryImpl();

		dgDocumentManagerEntryImpl.setUuid(getUuid());
		dgDocumentManagerEntryImpl.setExternalReferenceCode(
			getExternalReferenceCode());
		dgDocumentManagerEntryImpl.setDocumentManagerId(getDocumentManagerId());
		dgDocumentManagerEntryImpl.setGroupId(getGroupId());
		dgDocumentManagerEntryImpl.setCompanyId(getCompanyId());
		dgDocumentManagerEntryImpl.setUserId(getUserId());
		dgDocumentManagerEntryImpl.setUserName(getUserName());
		dgDocumentManagerEntryImpl.setCreateDate(getCreateDate());
		dgDocumentManagerEntryImpl.setModifiedDate(getModifiedDate());
		dgDocumentManagerEntryImpl.setCustomerId(getCustomerId());
		dgDocumentManagerEntryImpl.setCreatorId(getCreatorId());
		dgDocumentManagerEntryImpl.setPkCode(getPkCode());
		dgDocumentManagerEntryImpl.setParentId(getParentId());
		dgDocumentManagerEntryImpl.setName(getName());
		dgDocumentManagerEntryImpl.setCategory(getCategory());
		dgDocumentManagerEntryImpl.setType(getType());
		dgDocumentManagerEntryImpl.setFileId(getFileId());
		dgDocumentManagerEntryImpl.setFileSize(getFileSize());
		dgDocumentManagerEntryImpl.setFileExtension(getFileExtension());
		dgDocumentManagerEntryImpl.setMineType(getMineType());
		dgDocumentManagerEntryImpl.setPath(getPath());
		dgDocumentManagerEntryImpl.setModuleId(getModuleId());
		dgDocumentManagerEntryImpl.setAppId(getAppId());
		dgDocumentManagerEntryImpl.setDepartmentId(getDepartmentId());
		dgDocumentManagerEntryImpl.setIsPrivate(isIsPrivate());

		dgDocumentManagerEntryImpl.resetOriginalValues();

		return dgDocumentManagerEntryImpl;
	}

	@Override
	public DGDocumentManagerEntry cloneWithOriginalValues() {
		DGDocumentManagerEntryImpl dgDocumentManagerEntryImpl =
			new DGDocumentManagerEntryImpl();

		dgDocumentManagerEntryImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		dgDocumentManagerEntryImpl.setExternalReferenceCode(
			this.<String>getColumnOriginalValue("externalReferenceCode"));
		dgDocumentManagerEntryImpl.setDocumentManagerId(
			this.<Long>getColumnOriginalValue("documentManagerId"));
		dgDocumentManagerEntryImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		dgDocumentManagerEntryImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		dgDocumentManagerEntryImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		dgDocumentManagerEntryImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		dgDocumentManagerEntryImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		dgDocumentManagerEntryImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		dgDocumentManagerEntryImpl.setCustomerId(
			this.<Long>getColumnOriginalValue("customerId"));
		dgDocumentManagerEntryImpl.setCreatorId(
			this.<Long>getColumnOriginalValue("creatorId"));
		dgDocumentManagerEntryImpl.setPkCode(
			this.<String>getColumnOriginalValue("pkCode"));
		dgDocumentManagerEntryImpl.setParentId(
			this.<Long>getColumnOriginalValue("parentId"));
		dgDocumentManagerEntryImpl.setName(
			this.<String>getColumnOriginalValue("name"));
		dgDocumentManagerEntryImpl.setCategory(
			this.<String>getColumnOriginalValue("category"));
		dgDocumentManagerEntryImpl.setType(
			this.<String>getColumnOriginalValue("type_"));
		dgDocumentManagerEntryImpl.setFileId(
			this.<Long>getColumnOriginalValue("fileId"));
		dgDocumentManagerEntryImpl.setFileSize(
			this.<String>getColumnOriginalValue("fileSize"));
		dgDocumentManagerEntryImpl.setFileExtension(
			this.<String>getColumnOriginalValue("fileExtension"));
		dgDocumentManagerEntryImpl.setMineType(
			this.<String>getColumnOriginalValue("mineType"));
		dgDocumentManagerEntryImpl.setPath(
			this.<String>getColumnOriginalValue("path_"));
		dgDocumentManagerEntryImpl.setModuleId(
			this.<String>getColumnOriginalValue("moduleId"));
		dgDocumentManagerEntryImpl.setAppId(
			this.<String>getColumnOriginalValue("appId"));
		dgDocumentManagerEntryImpl.setDepartmentId(
			this.<Long>getColumnOriginalValue("departmentId"));
		dgDocumentManagerEntryImpl.setIsPrivate(
			this.<Boolean>getColumnOriginalValue("isPrivate"));

		return dgDocumentManagerEntryImpl;
	}

	@Override
	public int compareTo(DGDocumentManagerEntry dgDocumentManagerEntry) {
		long primaryKey = dgDocumentManagerEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DGDocumentManagerEntry)) {
			return false;
		}

		DGDocumentManagerEntry dgDocumentManagerEntry =
			(DGDocumentManagerEntry)object;

		long primaryKey = dgDocumentManagerEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DGDocumentManagerEntry> toCacheModel() {
		DGDocumentManagerEntryCacheModel dgDocumentManagerEntryCacheModel =
			new DGDocumentManagerEntryCacheModel();

		dgDocumentManagerEntryCacheModel.uuid = getUuid();

		String uuid = dgDocumentManagerEntryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			dgDocumentManagerEntryCacheModel.uuid = null;
		}

		dgDocumentManagerEntryCacheModel.externalReferenceCode =
			getExternalReferenceCode();

		String externalReferenceCode =
			dgDocumentManagerEntryCacheModel.externalReferenceCode;

		if ((externalReferenceCode != null) &&
			(externalReferenceCode.length() == 0)) {

			dgDocumentManagerEntryCacheModel.externalReferenceCode = null;
		}

		dgDocumentManagerEntryCacheModel.documentManagerId =
			getDocumentManagerId();

		dgDocumentManagerEntryCacheModel.groupId = getGroupId();

		dgDocumentManagerEntryCacheModel.companyId = getCompanyId();

		dgDocumentManagerEntryCacheModel.userId = getUserId();

		dgDocumentManagerEntryCacheModel.userName = getUserName();

		String userName = dgDocumentManagerEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			dgDocumentManagerEntryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			dgDocumentManagerEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			dgDocumentManagerEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dgDocumentManagerEntryCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			dgDocumentManagerEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		dgDocumentManagerEntryCacheModel.customerId = getCustomerId();

		dgDocumentManagerEntryCacheModel.creatorId = getCreatorId();

		dgDocumentManagerEntryCacheModel.pkCode = getPkCode();

		String pkCode = dgDocumentManagerEntryCacheModel.pkCode;

		if ((pkCode != null) && (pkCode.length() == 0)) {
			dgDocumentManagerEntryCacheModel.pkCode = null;
		}

		dgDocumentManagerEntryCacheModel.parentId = getParentId();

		dgDocumentManagerEntryCacheModel.name = getName();

		String name = dgDocumentManagerEntryCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			dgDocumentManagerEntryCacheModel.name = null;
		}

		dgDocumentManagerEntryCacheModel.category = getCategory();

		String category = dgDocumentManagerEntryCacheModel.category;

		if ((category != null) && (category.length() == 0)) {
			dgDocumentManagerEntryCacheModel.category = null;
		}

		dgDocumentManagerEntryCacheModel.type = getType();

		String type = dgDocumentManagerEntryCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			dgDocumentManagerEntryCacheModel.type = null;
		}

		dgDocumentManagerEntryCacheModel.fileId = getFileId();

		dgDocumentManagerEntryCacheModel.fileSize = getFileSize();

		String fileSize = dgDocumentManagerEntryCacheModel.fileSize;

		if ((fileSize != null) && (fileSize.length() == 0)) {
			dgDocumentManagerEntryCacheModel.fileSize = null;
		}

		dgDocumentManagerEntryCacheModel.fileExtension = getFileExtension();

		String fileExtension = dgDocumentManagerEntryCacheModel.fileExtension;

		if ((fileExtension != null) && (fileExtension.length() == 0)) {
			dgDocumentManagerEntryCacheModel.fileExtension = null;
		}

		dgDocumentManagerEntryCacheModel.mineType = getMineType();

		String mineType = dgDocumentManagerEntryCacheModel.mineType;

		if ((mineType != null) && (mineType.length() == 0)) {
			dgDocumentManagerEntryCacheModel.mineType = null;
		}

		dgDocumentManagerEntryCacheModel.path = getPath();

		String path = dgDocumentManagerEntryCacheModel.path;

		if ((path != null) && (path.length() == 0)) {
			dgDocumentManagerEntryCacheModel.path = null;
		}

		dgDocumentManagerEntryCacheModel.moduleId = getModuleId();

		String moduleId = dgDocumentManagerEntryCacheModel.moduleId;

		if ((moduleId != null) && (moduleId.length() == 0)) {
			dgDocumentManagerEntryCacheModel.moduleId = null;
		}

		dgDocumentManagerEntryCacheModel.appId = getAppId();

		String appId = dgDocumentManagerEntryCacheModel.appId;

		if ((appId != null) && (appId.length() == 0)) {
			dgDocumentManagerEntryCacheModel.appId = null;
		}

		dgDocumentManagerEntryCacheModel.departmentId = getDepartmentId();

		dgDocumentManagerEntryCacheModel.isPrivate = isIsPrivate();

		return dgDocumentManagerEntryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DGDocumentManagerEntry, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DGDocumentManagerEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DGDocumentManagerEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(DGDocumentManagerEntry)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<DGDocumentManagerEntry, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<DGDocumentManagerEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DGDocumentManagerEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((DGDocumentManagerEntry)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DGDocumentManagerEntry>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _externalReferenceCode;
	private long _documentManagerId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _customerId;
	private long _creatorId;
	private String _pkCode;
	private long _parentId;
	private String _name;
	private String _category;
	private String _type;
	private long _fileId;
	private String _fileSize;
	private String _fileExtension;
	private String _mineType;
	private String _path;
	private String _moduleId;
	private String _appId;
	private long _departmentId;
	private boolean _isPrivate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<DGDocumentManagerEntry, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DGDocumentManagerEntry)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"externalReferenceCode", _externalReferenceCode);
		_columnOriginalValues.put("documentManagerId", _documentManagerId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("customerId", _customerId);
		_columnOriginalValues.put("creatorId", _creatorId);
		_columnOriginalValues.put("pkCode", _pkCode);
		_columnOriginalValues.put("parentId", _parentId);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("category", _category);
		_columnOriginalValues.put("type_", _type);
		_columnOriginalValues.put("fileId", _fileId);
		_columnOriginalValues.put("fileSize", _fileSize);
		_columnOriginalValues.put("fileExtension", _fileExtension);
		_columnOriginalValues.put("mineType", _mineType);
		_columnOriginalValues.put("path_", _path);
		_columnOriginalValues.put("moduleId", _moduleId);
		_columnOriginalValues.put("appId", _appId);
		_columnOriginalValues.put("departmentId", _departmentId);
		_columnOriginalValues.put("isPrivate", _isPrivate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("type_", "type");
		attributeNames.put("path_", "path");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("externalReferenceCode", 2L);

		columnBitmasks.put("documentManagerId", 4L);

		columnBitmasks.put("groupId", 8L);

		columnBitmasks.put("companyId", 16L);

		columnBitmasks.put("userId", 32L);

		columnBitmasks.put("userName", 64L);

		columnBitmasks.put("createDate", 128L);

		columnBitmasks.put("modifiedDate", 256L);

		columnBitmasks.put("customerId", 512L);

		columnBitmasks.put("creatorId", 1024L);

		columnBitmasks.put("pkCode", 2048L);

		columnBitmasks.put("parentId", 4096L);

		columnBitmasks.put("name", 8192L);

		columnBitmasks.put("category", 16384L);

		columnBitmasks.put("type_", 32768L);

		columnBitmasks.put("fileId", 65536L);

		columnBitmasks.put("fileSize", 131072L);

		columnBitmasks.put("fileExtension", 262144L);

		columnBitmasks.put("mineType", 524288L);

		columnBitmasks.put("path_", 1048576L);

		columnBitmasks.put("moduleId", 2097152L);

		columnBitmasks.put("appId", 4194304L);

		columnBitmasks.put("departmentId", 8388608L);

		columnBitmasks.put("isPrivate", 16777216L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private DGDocumentManagerEntry _escapedModel;

}