/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.dogoo.contact.service.model.impl;

import com.dogoo.contact.service.model.EmailEntry;
import com.dogoo.contact.service.model.EmailEntryModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the EmailEntry service. Represents a row in the &quot;DG_EmailEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EmailEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmailEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmailEntryImpl
 * @generated
 */
public class EmailEntryModelImpl
	extends BaseModelImpl<EmailEntry> implements EmailEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a email entry model instance should use the <code>EmailEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "DG_EmailEntry";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"externalReferenceCode", Types.VARCHAR},
		{"emailId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"creatorId", Types.BIGINT},
		{"customerId", Types.BIGINT}, {"contactId", Types.BIGINT},
		{"emailAddress", Types.VARCHAR}, {"isDefaulted", Types.BOOLEAN},
		{"description", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalReferenceCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emailId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("creatorId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("customerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("contactId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("emailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isDefaulted", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table DG_EmailEntry (uuid_ VARCHAR(75) null,externalReferenceCode VARCHAR(75) null,emailId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,creatorId LONG,customerId LONG,contactId LONG,emailAddress VARCHAR(75) null,isDefaulted BOOLEAN,description VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table DG_EmailEntry";

	public static final String ORDER_BY_JPQL =
		" ORDER BY emailEntry.emailId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY DG_EmailEntry.emailId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CONTACTID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CUSTOMERID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EMAILADDRESS_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EXTERNALREFERENCECODE_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ISDEFAULTED_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EMAILID_COLUMN_BITMASK = 256L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public EmailEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _emailId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmailId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _emailId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmailEntry.class;
	}

	@Override
	public String getModelClassName() {
		return EmailEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<EmailEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<EmailEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmailEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((EmailEntry)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<EmailEntry, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<EmailEntry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(EmailEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<EmailEntry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<EmailEntry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, EmailEntry>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			EmailEntry.class.getClassLoader(), EmailEntry.class,
			ModelWrapper.class);

		try {
			Constructor<EmailEntry> constructor =
				(Constructor<EmailEntry>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<EmailEntry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<EmailEntry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<EmailEntry, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<EmailEntry, Object>>();
		Map<String, BiConsumer<EmailEntry, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<EmailEntry, ?>>();

		attributeGetterFunctions.put("uuid", EmailEntry::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<EmailEntry, String>)EmailEntry::setUuid);
		attributeGetterFunctions.put(
			"externalReferenceCode", EmailEntry::getExternalReferenceCode);
		attributeSetterBiConsumers.put(
			"externalReferenceCode",
			(BiConsumer<EmailEntry, String>)
				EmailEntry::setExternalReferenceCode);
		attributeGetterFunctions.put("emailId", EmailEntry::getEmailId);
		attributeSetterBiConsumers.put(
			"emailId", (BiConsumer<EmailEntry, Long>)EmailEntry::setEmailId);
		attributeGetterFunctions.put("groupId", EmailEntry::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<EmailEntry, Long>)EmailEntry::setGroupId);
		attributeGetterFunctions.put("companyId", EmailEntry::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<EmailEntry, Long>)EmailEntry::setCompanyId);
		attributeGetterFunctions.put("userId", EmailEntry::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<EmailEntry, Long>)EmailEntry::setUserId);
		attributeGetterFunctions.put("userName", EmailEntry::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<EmailEntry, String>)EmailEntry::setUserName);
		attributeGetterFunctions.put("createDate", EmailEntry::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<EmailEntry, Date>)EmailEntry::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", EmailEntry::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<EmailEntry, Date>)EmailEntry::setModifiedDate);
		attributeGetterFunctions.put("creatorId", EmailEntry::getCreatorId);
		attributeSetterBiConsumers.put(
			"creatorId",
			(BiConsumer<EmailEntry, Long>)EmailEntry::setCreatorId);
		attributeGetterFunctions.put("customerId", EmailEntry::getCustomerId);
		attributeSetterBiConsumers.put(
			"customerId",
			(BiConsumer<EmailEntry, Long>)EmailEntry::setCustomerId);
		attributeGetterFunctions.put("contactId", EmailEntry::getContactId);
		attributeSetterBiConsumers.put(
			"contactId",
			(BiConsumer<EmailEntry, Long>)EmailEntry::setContactId);
		attributeGetterFunctions.put(
			"emailAddress", EmailEntry::getEmailAddress);
		attributeSetterBiConsumers.put(
			"emailAddress",
			(BiConsumer<EmailEntry, String>)EmailEntry::setEmailAddress);
		attributeGetterFunctions.put("isDefaulted", EmailEntry::getIsDefaulted);
		attributeSetterBiConsumers.put(
			"isDefaulted",
			(BiConsumer<EmailEntry, Boolean>)EmailEntry::setIsDefaulted);
		attributeGetterFunctions.put("description", EmailEntry::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<EmailEntry, String>)EmailEntry::setDescription);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public String getExternalReferenceCode() {
		if (_externalReferenceCode == null) {
			return "";
		}
		else {
			return _externalReferenceCode;
		}
	}

	@Override
	public void setExternalReferenceCode(String externalReferenceCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_externalReferenceCode = externalReferenceCode;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalExternalReferenceCode() {
		return getColumnOriginalValue("externalReferenceCode");
	}

	@Override
	public long getEmailId() {
		return _emailId;
	}

	@Override
	public void setEmailId(long emailId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emailId = emailId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getCreatorId() {
		return _creatorId;
	}

	@Override
	public void setCreatorId(long creatorId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_creatorId = creatorId;
	}

	@Override
	public long getCustomerId() {
		return _customerId;
	}

	@Override
	public void setCustomerId(long customerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customerId = customerId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCustomerId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("customerId"));
	}

	@Override
	public long getContactId() {
		return _contactId;
	}

	@Override
	public void setContactId(long contactId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contactId = contactId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalContactId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("contactId"));
	}

	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return "";
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emailAddress = emailAddress;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalEmailAddress() {
		return getColumnOriginalValue("emailAddress");
	}

	@Override
	public boolean getIsDefaulted() {
		return _isDefaulted;
	}

	@Override
	public boolean isIsDefaulted() {
		return _isDefaulted;
	}

	@Override
	public void setIsDefaulted(boolean isDefaulted) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isDefaulted = isDefaulted;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalIsDefaulted() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("isDefaulted"));
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(EmailEntry.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), EmailEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmailEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, EmailEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmailEntryImpl emailEntryImpl = new EmailEntryImpl();

		emailEntryImpl.setUuid(getUuid());
		emailEntryImpl.setExternalReferenceCode(getExternalReferenceCode());
		emailEntryImpl.setEmailId(getEmailId());
		emailEntryImpl.setGroupId(getGroupId());
		emailEntryImpl.setCompanyId(getCompanyId());
		emailEntryImpl.setUserId(getUserId());
		emailEntryImpl.setUserName(getUserName());
		emailEntryImpl.setCreateDate(getCreateDate());
		emailEntryImpl.setModifiedDate(getModifiedDate());
		emailEntryImpl.setCreatorId(getCreatorId());
		emailEntryImpl.setCustomerId(getCustomerId());
		emailEntryImpl.setContactId(getContactId());
		emailEntryImpl.setEmailAddress(getEmailAddress());
		emailEntryImpl.setIsDefaulted(isIsDefaulted());
		emailEntryImpl.setDescription(getDescription());

		emailEntryImpl.resetOriginalValues();

		return emailEntryImpl;
	}

	@Override
	public EmailEntry cloneWithOriginalValues() {
		EmailEntryImpl emailEntryImpl = new EmailEntryImpl();

		emailEntryImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		emailEntryImpl.setExternalReferenceCode(
			this.<String>getColumnOriginalValue("externalReferenceCode"));
		emailEntryImpl.setEmailId(this.<Long>getColumnOriginalValue("emailId"));
		emailEntryImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		emailEntryImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		emailEntryImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		emailEntryImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		emailEntryImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		emailEntryImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		emailEntryImpl.setCreatorId(
			this.<Long>getColumnOriginalValue("creatorId"));
		emailEntryImpl.setCustomerId(
			this.<Long>getColumnOriginalValue("customerId"));
		emailEntryImpl.setContactId(
			this.<Long>getColumnOriginalValue("contactId"));
		emailEntryImpl.setEmailAddress(
			this.<String>getColumnOriginalValue("emailAddress"));
		emailEntryImpl.setIsDefaulted(
			this.<Boolean>getColumnOriginalValue("isDefaulted"));
		emailEntryImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));

		return emailEntryImpl;
	}

	@Override
	public int compareTo(EmailEntry emailEntry) {
		long primaryKey = emailEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof EmailEntry)) {
			return false;
		}

		EmailEntry emailEntry = (EmailEntry)object;

		long primaryKey = emailEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<EmailEntry> toCacheModel() {
		EmailEntryCacheModel emailEntryCacheModel = new EmailEntryCacheModel();

		emailEntryCacheModel.uuid = getUuid();

		String uuid = emailEntryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			emailEntryCacheModel.uuid = null;
		}

		emailEntryCacheModel.externalReferenceCode = getExternalReferenceCode();

		String externalReferenceCode =
			emailEntryCacheModel.externalReferenceCode;

		if ((externalReferenceCode != null) &&
			(externalReferenceCode.length() == 0)) {

			emailEntryCacheModel.externalReferenceCode = null;
		}

		emailEntryCacheModel.emailId = getEmailId();

		emailEntryCacheModel.groupId = getGroupId();

		emailEntryCacheModel.companyId = getCompanyId();

		emailEntryCacheModel.userId = getUserId();

		emailEntryCacheModel.userName = getUserName();

		String userName = emailEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			emailEntryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			emailEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			emailEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			emailEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			emailEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		emailEntryCacheModel.creatorId = getCreatorId();

		emailEntryCacheModel.customerId = getCustomerId();

		emailEntryCacheModel.contactId = getContactId();

		emailEntryCacheModel.emailAddress = getEmailAddress();

		String emailAddress = emailEntryCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			emailEntryCacheModel.emailAddress = null;
		}

		emailEntryCacheModel.isDefaulted = isIsDefaulted();

		emailEntryCacheModel.description = getDescription();

		String description = emailEntryCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			emailEntryCacheModel.description = null;
		}

		return emailEntryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<EmailEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<EmailEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmailEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((EmailEntry)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<EmailEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<EmailEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EmailEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((EmailEntry)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, EmailEntry>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _externalReferenceCode;
	private long _emailId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _creatorId;
	private long _customerId;
	private long _contactId;
	private String _emailAddress;
	private boolean _isDefaulted;
	private String _description;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<EmailEntry, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((EmailEntry)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"externalReferenceCode", _externalReferenceCode);
		_columnOriginalValues.put("emailId", _emailId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("creatorId", _creatorId);
		_columnOriginalValues.put("customerId", _customerId);
		_columnOriginalValues.put("contactId", _contactId);
		_columnOriginalValues.put("emailAddress", _emailAddress);
		_columnOriginalValues.put("isDefaulted", _isDefaulted);
		_columnOriginalValues.put("description", _description);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("externalReferenceCode", 2L);

		columnBitmasks.put("emailId", 4L);

		columnBitmasks.put("groupId", 8L);

		columnBitmasks.put("companyId", 16L);

		columnBitmasks.put("userId", 32L);

		columnBitmasks.put("userName", 64L);

		columnBitmasks.put("createDate", 128L);

		columnBitmasks.put("modifiedDate", 256L);

		columnBitmasks.put("creatorId", 512L);

		columnBitmasks.put("customerId", 1024L);

		columnBitmasks.put("contactId", 2048L);

		columnBitmasks.put("emailAddress", 4096L);

		columnBitmasks.put("isDefaulted", 8192L);

		columnBitmasks.put("description", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private EmailEntry _escapedModel;

}