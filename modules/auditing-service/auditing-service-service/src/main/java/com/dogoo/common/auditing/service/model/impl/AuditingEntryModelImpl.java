/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.dogoo.common.auditing.service.model.impl;

import com.dogoo.common.auditing.service.model.AuditingEntry;
import com.dogoo.common.auditing.service.model.AuditingEntryModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AuditingEntry service. Represents a row in the &quot;DG_Auditing&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AuditingEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AuditingEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AuditingEntryImpl
 * @generated
 */
public class AuditingEntryModelImpl
	extends BaseModelImpl<AuditingEntry> implements AuditingEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a auditing entry model instance should use the <code>AuditingEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "DG_Auditing";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"externalReferenceCode", Types.VARCHAR},
		{"auditingId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"customerId", Types.BIGINT}, {"creatorId", Types.BIGINT},
		{"creatorName", Types.VARCHAR}, {"name", Types.VARCHAR},
		{"eventType", Types.VARCHAR}, {"message", Types.VARCHAR},
		{"payload", Types.VARCHAR}, {"classPkId", Types.BIGINT},
		{"classPkName", Types.VARCHAR}, {"parentPkId", Types.BIGINT},
		{"parentPkName", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalReferenceCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("auditingId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("customerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("creatorId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("creatorName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eventType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("message", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("payload", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("classPkId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("classPkName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("parentPkId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("parentPkName", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table DG_Auditing (uuid_ VARCHAR(75) null,externalReferenceCode VARCHAR(75) null,auditingId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,customerId LONG,creatorId LONG,creatorName VARCHAR(75) null,name VARCHAR(75) null,eventType VARCHAR(75) null,message VARCHAR(75) null,payload VARCHAR(75) null,classPkId LONG,classPkName VARCHAR(75) null,parentPkId LONG,parentPkName VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table DG_Auditing";

	public static final String ORDER_BY_JPQL =
		" ORDER BY auditingEntry.auditingId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY DG_Auditing.auditingId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CLASSPKID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CLASSPKNAME_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EXTERNALREFERENCECODE_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PARENTPKID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PARENTPKNAME_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long AUDITINGID_COLUMN_BITMASK = 256L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AuditingEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _auditingId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAuditingId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _auditingId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AuditingEntry.class;
	}

	@Override
	public String getModelClassName() {
		return AuditingEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AuditingEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AuditingEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AuditingEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AuditingEntry)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AuditingEntry, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AuditingEntry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AuditingEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AuditingEntry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AuditingEntry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, AuditingEntry>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			AuditingEntry.class.getClassLoader(), AuditingEntry.class,
			ModelWrapper.class);

		try {
			Constructor<AuditingEntry> constructor =
				(Constructor<AuditingEntry>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<AuditingEntry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<AuditingEntry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<AuditingEntry, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<AuditingEntry, Object>>();
		Map<String, BiConsumer<AuditingEntry, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<AuditingEntry, ?>>();

		attributeGetterFunctions.put("uuid", AuditingEntry::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<AuditingEntry, String>)AuditingEntry::setUuid);
		attributeGetterFunctions.put(
			"externalReferenceCode", AuditingEntry::getExternalReferenceCode);
		attributeSetterBiConsumers.put(
			"externalReferenceCode",
			(BiConsumer<AuditingEntry, String>)
				AuditingEntry::setExternalReferenceCode);
		attributeGetterFunctions.put(
			"auditingId", AuditingEntry::getAuditingId);
		attributeSetterBiConsumers.put(
			"auditingId",
			(BiConsumer<AuditingEntry, Long>)AuditingEntry::setAuditingId);
		attributeGetterFunctions.put("groupId", AuditingEntry::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<AuditingEntry, Long>)AuditingEntry::setGroupId);
		attributeGetterFunctions.put("companyId", AuditingEntry::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<AuditingEntry, Long>)AuditingEntry::setCompanyId);
		attributeGetterFunctions.put("userId", AuditingEntry::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<AuditingEntry, Long>)AuditingEntry::setUserId);
		attributeGetterFunctions.put("userName", AuditingEntry::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<AuditingEntry, String>)AuditingEntry::setUserName);
		attributeGetterFunctions.put(
			"createDate", AuditingEntry::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<AuditingEntry, Date>)AuditingEntry::setCreateDate);
		attributeGetterFunctions.put(
			"customerId", AuditingEntry::getCustomerId);
		attributeSetterBiConsumers.put(
			"customerId",
			(BiConsumer<AuditingEntry, Long>)AuditingEntry::setCustomerId);
		attributeGetterFunctions.put("creatorId", AuditingEntry::getCreatorId);
		attributeSetterBiConsumers.put(
			"creatorId",
			(BiConsumer<AuditingEntry, Long>)AuditingEntry::setCreatorId);
		attributeGetterFunctions.put(
			"creatorName", AuditingEntry::getCreatorName);
		attributeSetterBiConsumers.put(
			"creatorName",
			(BiConsumer<AuditingEntry, String>)AuditingEntry::setCreatorName);
		attributeGetterFunctions.put("name", AuditingEntry::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<AuditingEntry, String>)AuditingEntry::setName);
		attributeGetterFunctions.put("eventType", AuditingEntry::getEventType);
		attributeSetterBiConsumers.put(
			"eventType",
			(BiConsumer<AuditingEntry, String>)AuditingEntry::setEventType);
		attributeGetterFunctions.put("message", AuditingEntry::getMessage);
		attributeSetterBiConsumers.put(
			"message",
			(BiConsumer<AuditingEntry, String>)AuditingEntry::setMessage);
		attributeGetterFunctions.put("payload", AuditingEntry::getPayload);
		attributeSetterBiConsumers.put(
			"payload",
			(BiConsumer<AuditingEntry, String>)AuditingEntry::setPayload);
		attributeGetterFunctions.put("classPkId", AuditingEntry::getClassPkId);
		attributeSetterBiConsumers.put(
			"classPkId",
			(BiConsumer<AuditingEntry, Long>)AuditingEntry::setClassPkId);
		attributeGetterFunctions.put(
			"classPkName", AuditingEntry::getClassPkName);
		attributeSetterBiConsumers.put(
			"classPkName",
			(BiConsumer<AuditingEntry, String>)AuditingEntry::setClassPkName);
		attributeGetterFunctions.put(
			"parentPkId", AuditingEntry::getParentPkId);
		attributeSetterBiConsumers.put(
			"parentPkId",
			(BiConsumer<AuditingEntry, Long>)AuditingEntry::setParentPkId);
		attributeGetterFunctions.put(
			"parentPkName", AuditingEntry::getParentPkName);
		attributeSetterBiConsumers.put(
			"parentPkName",
			(BiConsumer<AuditingEntry, String>)AuditingEntry::setParentPkName);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public String getExternalReferenceCode() {
		if (_externalReferenceCode == null) {
			return "";
		}
		else {
			return _externalReferenceCode;
		}
	}

	@Override
	public void setExternalReferenceCode(String externalReferenceCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_externalReferenceCode = externalReferenceCode;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalExternalReferenceCode() {
		return getColumnOriginalValue("externalReferenceCode");
	}

	@Override
	public long getAuditingId() {
		return _auditingId;
	}

	@Override
	public void setAuditingId(long auditingId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_auditingId = auditingId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public long getCustomerId() {
		return _customerId;
	}

	@Override
	public void setCustomerId(long customerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customerId = customerId;
	}

	@Override
	public long getCreatorId() {
		return _creatorId;
	}

	@Override
	public void setCreatorId(long creatorId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_creatorId = creatorId;
	}

	@Override
	public String getCreatorName() {
		if (_creatorName == null) {
			return "";
		}
		else {
			return _creatorName;
		}
	}

	@Override
	public void setCreatorName(String creatorName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_creatorName = creatorName;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@Override
	public String getEventType() {
		if (_eventType == null) {
			return "";
		}
		else {
			return _eventType;
		}
	}

	@Override
	public void setEventType(String eventType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_eventType = eventType;
	}

	@Override
	public String getMessage() {
		if (_message == null) {
			return "";
		}
		else {
			return _message;
		}
	}

	@Override
	public void setMessage(String message) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_message = message;
	}

	@Override
	public String getPayload() {
		if (_payload == null) {
			return "";
		}
		else {
			return _payload;
		}
	}

	@Override
	public void setPayload(String payload) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_payload = payload;
	}

	@Override
	public long getClassPkId() {
		return _classPkId;
	}

	@Override
	public void setClassPkId(long classPkId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_classPkId = classPkId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalClassPkId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("classPkId"));
	}

	@Override
	public String getClassPkName() {
		if (_classPkName == null) {
			return "";
		}
		else {
			return _classPkName;
		}
	}

	@Override
	public void setClassPkName(String classPkName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_classPkName = classPkName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalClassPkName() {
		return getColumnOriginalValue("classPkName");
	}

	@Override
	public Long getParentPkId() {
		return _parentPkId;
	}

	@Override
	public void setParentPkId(Long parentPkId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_parentPkId = parentPkId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public Long getOriginalParentPkId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("parentPkId"));
	}

	@Override
	public String getParentPkName() {
		if (_parentPkName == null) {
			return "";
		}
		else {
			return _parentPkName;
		}
	}

	@Override
	public void setParentPkName(String parentPkName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_parentPkName = parentPkName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalParentPkName() {
		return getColumnOriginalValue("parentPkName");
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AuditingEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AuditingEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AuditingEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AuditingEntryImpl auditingEntryImpl = new AuditingEntryImpl();

		auditingEntryImpl.setUuid(getUuid());
		auditingEntryImpl.setExternalReferenceCode(getExternalReferenceCode());
		auditingEntryImpl.setAuditingId(getAuditingId());
		auditingEntryImpl.setGroupId(getGroupId());
		auditingEntryImpl.setCompanyId(getCompanyId());
		auditingEntryImpl.setUserId(getUserId());
		auditingEntryImpl.setUserName(getUserName());
		auditingEntryImpl.setCreateDate(getCreateDate());
		auditingEntryImpl.setCustomerId(getCustomerId());
		auditingEntryImpl.setCreatorId(getCreatorId());
		auditingEntryImpl.setCreatorName(getCreatorName());
		auditingEntryImpl.setName(getName());
		auditingEntryImpl.setEventType(getEventType());
		auditingEntryImpl.setMessage(getMessage());
		auditingEntryImpl.setPayload(getPayload());
		auditingEntryImpl.setClassPkId(getClassPkId());
		auditingEntryImpl.setClassPkName(getClassPkName());
		auditingEntryImpl.setParentPkId(getParentPkId());
		auditingEntryImpl.setParentPkName(getParentPkName());

		auditingEntryImpl.resetOriginalValues();

		return auditingEntryImpl;
	}

	@Override
	public AuditingEntry cloneWithOriginalValues() {
		AuditingEntryImpl auditingEntryImpl = new AuditingEntryImpl();

		auditingEntryImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		auditingEntryImpl.setExternalReferenceCode(
			this.<String>getColumnOriginalValue("externalReferenceCode"));
		auditingEntryImpl.setAuditingId(
			this.<Long>getColumnOriginalValue("auditingId"));
		auditingEntryImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		auditingEntryImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		auditingEntryImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		auditingEntryImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		auditingEntryImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		auditingEntryImpl.setCustomerId(
			this.<Long>getColumnOriginalValue("customerId"));
		auditingEntryImpl.setCreatorId(
			this.<Long>getColumnOriginalValue("creatorId"));
		auditingEntryImpl.setCreatorName(
			this.<String>getColumnOriginalValue("creatorName"));
		auditingEntryImpl.setName(this.<String>getColumnOriginalValue("name"));
		auditingEntryImpl.setEventType(
			this.<String>getColumnOriginalValue("eventType"));
		auditingEntryImpl.setMessage(
			this.<String>getColumnOriginalValue("message"));
		auditingEntryImpl.setPayload(
			this.<String>getColumnOriginalValue("payload"));
		auditingEntryImpl.setClassPkId(
			this.<Long>getColumnOriginalValue("classPkId"));
		auditingEntryImpl.setClassPkName(
			this.<String>getColumnOriginalValue("classPkName"));
		auditingEntryImpl.setParentPkId(
			this.<Long>getColumnOriginalValue("parentPkId"));
		auditingEntryImpl.setParentPkName(
			this.<String>getColumnOriginalValue("parentPkName"));

		return auditingEntryImpl;
	}

	@Override
	public int compareTo(AuditingEntry auditingEntry) {
		long primaryKey = auditingEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AuditingEntry)) {
			return false;
		}

		AuditingEntry auditingEntry = (AuditingEntry)object;

		long primaryKey = auditingEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AuditingEntry> toCacheModel() {
		AuditingEntryCacheModel auditingEntryCacheModel =
			new AuditingEntryCacheModel();

		auditingEntryCacheModel.uuid = getUuid();

		String uuid = auditingEntryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			auditingEntryCacheModel.uuid = null;
		}

		auditingEntryCacheModel.externalReferenceCode =
			getExternalReferenceCode();

		String externalReferenceCode =
			auditingEntryCacheModel.externalReferenceCode;

		if ((externalReferenceCode != null) &&
			(externalReferenceCode.length() == 0)) {

			auditingEntryCacheModel.externalReferenceCode = null;
		}

		auditingEntryCacheModel.auditingId = getAuditingId();

		auditingEntryCacheModel.groupId = getGroupId();

		auditingEntryCacheModel.companyId = getCompanyId();

		auditingEntryCacheModel.userId = getUserId();

		auditingEntryCacheModel.userName = getUserName();

		String userName = auditingEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			auditingEntryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			auditingEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			auditingEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		auditingEntryCacheModel.customerId = getCustomerId();

		auditingEntryCacheModel.creatorId = getCreatorId();

		auditingEntryCacheModel.creatorName = getCreatorName();

		String creatorName = auditingEntryCacheModel.creatorName;

		if ((creatorName != null) && (creatorName.length() == 0)) {
			auditingEntryCacheModel.creatorName = null;
		}

		auditingEntryCacheModel.name = getName();

		String name = auditingEntryCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			auditingEntryCacheModel.name = null;
		}

		auditingEntryCacheModel.eventType = getEventType();

		String eventType = auditingEntryCacheModel.eventType;

		if ((eventType != null) && (eventType.length() == 0)) {
			auditingEntryCacheModel.eventType = null;
		}

		auditingEntryCacheModel.message = getMessage();

		String message = auditingEntryCacheModel.message;

		if ((message != null) && (message.length() == 0)) {
			auditingEntryCacheModel.message = null;
		}

		auditingEntryCacheModel.payload = getPayload();

		String payload = auditingEntryCacheModel.payload;

		if ((payload != null) && (payload.length() == 0)) {
			auditingEntryCacheModel.payload = null;
		}

		auditingEntryCacheModel.classPkId = getClassPkId();

		auditingEntryCacheModel.classPkName = getClassPkName();

		String classPkName = auditingEntryCacheModel.classPkName;

		if ((classPkName != null) && (classPkName.length() == 0)) {
			auditingEntryCacheModel.classPkName = null;
		}

		Long parentPkId = getParentPkId();

		if (parentPkId != null) {
			auditingEntryCacheModel.parentPkId = parentPkId;
		}

		auditingEntryCacheModel.parentPkName = getParentPkName();

		String parentPkName = auditingEntryCacheModel.parentPkName;

		if ((parentPkName != null) && (parentPkName.length() == 0)) {
			auditingEntryCacheModel.parentPkName = null;
		}

		return auditingEntryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AuditingEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AuditingEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AuditingEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((AuditingEntry)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<AuditingEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<AuditingEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AuditingEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((AuditingEntry)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AuditingEntry>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _externalReferenceCode;
	private long _auditingId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private long _customerId;
	private long _creatorId;
	private String _creatorName;
	private String _name;
	private String _eventType;
	private String _message;
	private String _payload;
	private long _classPkId;
	private String _classPkName;
	private Long _parentPkId;
	private String _parentPkName;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<AuditingEntry, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AuditingEntry)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"externalReferenceCode", _externalReferenceCode);
		_columnOriginalValues.put("auditingId", _auditingId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("customerId", _customerId);
		_columnOriginalValues.put("creatorId", _creatorId);
		_columnOriginalValues.put("creatorName", _creatorName);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("eventType", _eventType);
		_columnOriginalValues.put("message", _message);
		_columnOriginalValues.put("payload", _payload);
		_columnOriginalValues.put("classPkId", _classPkId);
		_columnOriginalValues.put("classPkName", _classPkName);
		_columnOriginalValues.put("parentPkId", _parentPkId);
		_columnOriginalValues.put("parentPkName", _parentPkName);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("externalReferenceCode", 2L);

		columnBitmasks.put("auditingId", 4L);

		columnBitmasks.put("groupId", 8L);

		columnBitmasks.put("companyId", 16L);

		columnBitmasks.put("userId", 32L);

		columnBitmasks.put("userName", 64L);

		columnBitmasks.put("createDate", 128L);

		columnBitmasks.put("customerId", 256L);

		columnBitmasks.put("creatorId", 512L);

		columnBitmasks.put("creatorName", 1024L);

		columnBitmasks.put("name", 2048L);

		columnBitmasks.put("eventType", 4096L);

		columnBitmasks.put("message", 8192L);

		columnBitmasks.put("payload", 16384L);

		columnBitmasks.put("classPkId", 32768L);

		columnBitmasks.put("classPkName", 65536L);

		columnBitmasks.put("parentPkId", 131072L);

		columnBitmasks.put("parentPkName", 262144L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AuditingEntry _escapedModel;

}