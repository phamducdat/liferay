/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.dogoo.common.comment.service.model.impl;

import com.dogoo.common.comment.service.model.CommentEntry;
import com.dogoo.common.comment.service.model.CommentEntryModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CommentEntry service. Represents a row in the &quot;DG_CommentEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CommentEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CommentEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CommentEntryImpl
 * @generated
 */
public class CommentEntryModelImpl
	extends BaseModelImpl<CommentEntry> implements CommentEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a comment entry model instance should use the <code>CommentEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "DG_CommentEntry";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"externalReferenceCode", Types.VARCHAR},
		{"commentId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"customerId", Types.BIGINT},
		{"creatorId", Types.BIGINT}, {"classPkId", Types.BIGINT},
		{"classPkName", Types.VARCHAR}, {"creatorFullName", Types.VARCHAR},
		{"content", Types.VARCHAR}, {"parentId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalReferenceCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("commentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("customerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("creatorId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("classPkId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("classPkName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("creatorFullName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("content", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("parentId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table DG_CommentEntry (uuid_ VARCHAR(75) null,externalReferenceCode VARCHAR(75) null,commentId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,customerId LONG,creatorId LONG,classPkId LONG,classPkName VARCHAR(75) null,creatorFullName VARCHAR(75) null,content VARCHAR(75) null,parentId LONG)";

	public static final String TABLE_SQL_DROP = "drop table DG_CommentEntry";

	public static final String ORDER_BY_JPQL =
		" ORDER BY commentEntry.commentId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY DG_CommentEntry.commentId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CLASSPKID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CLASSPKNAME_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CUSTOMERID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EXTERNALREFERENCECODE_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PARENTID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMMENTID_COLUMN_BITMASK = 256L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CommentEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _commentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCommentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _commentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CommentEntry.class;
	}

	@Override
	public String getModelClassName() {
		return CommentEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CommentEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CommentEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CommentEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CommentEntry)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CommentEntry, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CommentEntry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CommentEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CommentEntry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CommentEntry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, CommentEntry>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			CommentEntry.class.getClassLoader(), CommentEntry.class,
			ModelWrapper.class);

		try {
			Constructor<CommentEntry> constructor =
				(Constructor<CommentEntry>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<CommentEntry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CommentEntry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CommentEntry, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<CommentEntry, Object>>();
		Map<String, BiConsumer<CommentEntry, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<CommentEntry, ?>>();

		attributeGetterFunctions.put("uuid", CommentEntry::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<CommentEntry, String>)CommentEntry::setUuid);
		attributeGetterFunctions.put(
			"externalReferenceCode", CommentEntry::getExternalReferenceCode);
		attributeSetterBiConsumers.put(
			"externalReferenceCode",
			(BiConsumer<CommentEntry, String>)
				CommentEntry::setExternalReferenceCode);
		attributeGetterFunctions.put("commentId", CommentEntry::getCommentId);
		attributeSetterBiConsumers.put(
			"commentId",
			(BiConsumer<CommentEntry, Long>)CommentEntry::setCommentId);
		attributeGetterFunctions.put("groupId", CommentEntry::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<CommentEntry, Long>)CommentEntry::setGroupId);
		attributeGetterFunctions.put("companyId", CommentEntry::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<CommentEntry, Long>)CommentEntry::setCompanyId);
		attributeGetterFunctions.put("userId", CommentEntry::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<CommentEntry, Long>)CommentEntry::setUserId);
		attributeGetterFunctions.put("userName", CommentEntry::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<CommentEntry, String>)CommentEntry::setUserName);
		attributeGetterFunctions.put("createDate", CommentEntry::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<CommentEntry, Date>)CommentEntry::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", CommentEntry::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<CommentEntry, Date>)CommentEntry::setModifiedDate);
		attributeGetterFunctions.put("customerId", CommentEntry::getCustomerId);
		attributeSetterBiConsumers.put(
			"customerId",
			(BiConsumer<CommentEntry, Long>)CommentEntry::setCustomerId);
		attributeGetterFunctions.put("creatorId", CommentEntry::getCreatorId);
		attributeSetterBiConsumers.put(
			"creatorId",
			(BiConsumer<CommentEntry, Long>)CommentEntry::setCreatorId);
		attributeGetterFunctions.put("classPkId", CommentEntry::getClassPkId);
		attributeSetterBiConsumers.put(
			"classPkId",
			(BiConsumer<CommentEntry, Long>)CommentEntry::setClassPkId);
		attributeGetterFunctions.put(
			"classPkName", CommentEntry::getClassPkName);
		attributeSetterBiConsumers.put(
			"classPkName",
			(BiConsumer<CommentEntry, String>)CommentEntry::setClassPkName);
		attributeGetterFunctions.put(
			"creatorFullName", CommentEntry::getCreatorFullName);
		attributeSetterBiConsumers.put(
			"creatorFullName",
			(BiConsumer<CommentEntry, String>)CommentEntry::setCreatorFullName);
		attributeGetterFunctions.put("content", CommentEntry::getContent);
		attributeSetterBiConsumers.put(
			"content",
			(BiConsumer<CommentEntry, String>)CommentEntry::setContent);
		attributeGetterFunctions.put("parentId", CommentEntry::getParentId);
		attributeSetterBiConsumers.put(
			"parentId",
			(BiConsumer<CommentEntry, Long>)CommentEntry::setParentId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public String getExternalReferenceCode() {
		if (_externalReferenceCode == null) {
			return "";
		}
		else {
			return _externalReferenceCode;
		}
	}

	@Override
	public void setExternalReferenceCode(String externalReferenceCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_externalReferenceCode = externalReferenceCode;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalExternalReferenceCode() {
		return getColumnOriginalValue("externalReferenceCode");
	}

	@Override
	public long getCommentId() {
		return _commentId;
	}

	@Override
	public void setCommentId(long commentId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_commentId = commentId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getCustomerId() {
		return _customerId;
	}

	@Override
	public void setCustomerId(long customerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customerId = customerId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCustomerId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("customerId"));
	}

	@Override
	public long getCreatorId() {
		return _creatorId;
	}

	@Override
	public void setCreatorId(long creatorId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_creatorId = creatorId;
	}

	@Override
	public long getClassPkId() {
		return _classPkId;
	}

	@Override
	public void setClassPkId(long classPkId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_classPkId = classPkId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalClassPkId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("classPkId"));
	}

	@Override
	public String getClassPkName() {
		if (_classPkName == null) {
			return "";
		}
		else {
			return _classPkName;
		}
	}

	@Override
	public void setClassPkName(String classPkName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_classPkName = classPkName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalClassPkName() {
		return getColumnOriginalValue("classPkName");
	}

	@Override
	public String getCreatorFullName() {
		if (_creatorFullName == null) {
			return "";
		}
		else {
			return _creatorFullName;
		}
	}

	@Override
	public void setCreatorFullName(String creatorFullName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_creatorFullName = creatorFullName;
	}

	@Override
	public String getContent() {
		if (_content == null) {
			return "";
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_content = content;
	}

	@Override
	public long getParentId() {
		return _parentId;
	}

	@Override
	public void setParentId(long parentId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_parentId = parentId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalParentId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("parentId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(CommentEntry.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CommentEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CommentEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CommentEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CommentEntryImpl commentEntryImpl = new CommentEntryImpl();

		commentEntryImpl.setUuid(getUuid());
		commentEntryImpl.setExternalReferenceCode(getExternalReferenceCode());
		commentEntryImpl.setCommentId(getCommentId());
		commentEntryImpl.setGroupId(getGroupId());
		commentEntryImpl.setCompanyId(getCompanyId());
		commentEntryImpl.setUserId(getUserId());
		commentEntryImpl.setUserName(getUserName());
		commentEntryImpl.setCreateDate(getCreateDate());
		commentEntryImpl.setModifiedDate(getModifiedDate());
		commentEntryImpl.setCustomerId(getCustomerId());
		commentEntryImpl.setCreatorId(getCreatorId());
		commentEntryImpl.setClassPkId(getClassPkId());
		commentEntryImpl.setClassPkName(getClassPkName());
		commentEntryImpl.setCreatorFullName(getCreatorFullName());
		commentEntryImpl.setContent(getContent());
		commentEntryImpl.setParentId(getParentId());

		commentEntryImpl.resetOriginalValues();

		return commentEntryImpl;
	}

	@Override
	public CommentEntry cloneWithOriginalValues() {
		CommentEntryImpl commentEntryImpl = new CommentEntryImpl();

		commentEntryImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		commentEntryImpl.setExternalReferenceCode(
			this.<String>getColumnOriginalValue("externalReferenceCode"));
		commentEntryImpl.setCommentId(
			this.<Long>getColumnOriginalValue("commentId"));
		commentEntryImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		commentEntryImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		commentEntryImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		commentEntryImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		commentEntryImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		commentEntryImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		commentEntryImpl.setCustomerId(
			this.<Long>getColumnOriginalValue("customerId"));
		commentEntryImpl.setCreatorId(
			this.<Long>getColumnOriginalValue("creatorId"));
		commentEntryImpl.setClassPkId(
			this.<Long>getColumnOriginalValue("classPkId"));
		commentEntryImpl.setClassPkName(
			this.<String>getColumnOriginalValue("classPkName"));
		commentEntryImpl.setCreatorFullName(
			this.<String>getColumnOriginalValue("creatorFullName"));
		commentEntryImpl.setContent(
			this.<String>getColumnOriginalValue("content"));
		commentEntryImpl.setParentId(
			this.<Long>getColumnOriginalValue("parentId"));

		return commentEntryImpl;
	}

	@Override
	public int compareTo(CommentEntry commentEntry) {
		long primaryKey = commentEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CommentEntry)) {
			return false;
		}

		CommentEntry commentEntry = (CommentEntry)object;

		long primaryKey = commentEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CommentEntry> toCacheModel() {
		CommentEntryCacheModel commentEntryCacheModel =
			new CommentEntryCacheModel();

		commentEntryCacheModel.uuid = getUuid();

		String uuid = commentEntryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			commentEntryCacheModel.uuid = null;
		}

		commentEntryCacheModel.externalReferenceCode =
			getExternalReferenceCode();

		String externalReferenceCode =
			commentEntryCacheModel.externalReferenceCode;

		if ((externalReferenceCode != null) &&
			(externalReferenceCode.length() == 0)) {

			commentEntryCacheModel.externalReferenceCode = null;
		}

		commentEntryCacheModel.commentId = getCommentId();

		commentEntryCacheModel.groupId = getGroupId();

		commentEntryCacheModel.companyId = getCompanyId();

		commentEntryCacheModel.userId = getUserId();

		commentEntryCacheModel.userName = getUserName();

		String userName = commentEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			commentEntryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			commentEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			commentEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			commentEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			commentEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		commentEntryCacheModel.customerId = getCustomerId();

		commentEntryCacheModel.creatorId = getCreatorId();

		commentEntryCacheModel.classPkId = getClassPkId();

		commentEntryCacheModel.classPkName = getClassPkName();

		String classPkName = commentEntryCacheModel.classPkName;

		if ((classPkName != null) && (classPkName.length() == 0)) {
			commentEntryCacheModel.classPkName = null;
		}

		commentEntryCacheModel.creatorFullName = getCreatorFullName();

		String creatorFullName = commentEntryCacheModel.creatorFullName;

		if ((creatorFullName != null) && (creatorFullName.length() == 0)) {
			commentEntryCacheModel.creatorFullName = null;
		}

		commentEntryCacheModel.content = getContent();

		String content = commentEntryCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			commentEntryCacheModel.content = null;
		}

		commentEntryCacheModel.parentId = getParentId();

		return commentEntryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CommentEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CommentEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CommentEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((CommentEntry)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CommentEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<CommentEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CommentEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((CommentEntry)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CommentEntry>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _externalReferenceCode;
	private long _commentId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _customerId;
	private long _creatorId;
	private long _classPkId;
	private String _classPkName;
	private String _creatorFullName;
	private String _content;
	private long _parentId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<CommentEntry, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CommentEntry)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"externalReferenceCode", _externalReferenceCode);
		_columnOriginalValues.put("commentId", _commentId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("customerId", _customerId);
		_columnOriginalValues.put("creatorId", _creatorId);
		_columnOriginalValues.put("classPkId", _classPkId);
		_columnOriginalValues.put("classPkName", _classPkName);
		_columnOriginalValues.put("creatorFullName", _creatorFullName);
		_columnOriginalValues.put("content", _content);
		_columnOriginalValues.put("parentId", _parentId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("externalReferenceCode", 2L);

		columnBitmasks.put("commentId", 4L);

		columnBitmasks.put("groupId", 8L);

		columnBitmasks.put("companyId", 16L);

		columnBitmasks.put("userId", 32L);

		columnBitmasks.put("userName", 64L);

		columnBitmasks.put("createDate", 128L);

		columnBitmasks.put("modifiedDate", 256L);

		columnBitmasks.put("customerId", 512L);

		columnBitmasks.put("creatorId", 1024L);

		columnBitmasks.put("classPkId", 2048L);

		columnBitmasks.put("classPkName", 4096L);

		columnBitmasks.put("creatorFullName", 8192L);

		columnBitmasks.put("content", 16384L);

		columnBitmasks.put("parentId", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CommentEntry _escapedModel;

}